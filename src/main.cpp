#include "parser.h"
// #include "calculator.h"

int main() { // TODO remove (test method)
    init_math_constants();
    init_math_functions();

    vector<string> testcases = {
        "1.5 + 2.5",
        "-4 * 5 / 4",
        "-(1 + 2) + 5 * 2",
        "((((((5)+4) / 3 * 2) + 9 ) + 1) + 1) * 0",
        "-(-(111.00))",
        "123 - 123.000 * 0",
        "5 % 4.3",
        "5 // 4",
        "5 // 4 + 1",
        "5 // 4 % 4",
        "2 ^ .5",
        "-1 ^ 3",
        "5 ^ 1 * 2",
        "1.3*1.3*.6",
        "1 ^ 1 ^ 1 ^ 1 ^ 2",
        "1 ^ 5 / 3",
        "2 ^ 2 * 3 ^ 2 + 5",
        "-5 * -4 - 6 / -6",
        "-(-4 / -5 * -1 * -(1/ -5) - 1) - 0",
        "0 / 0",
        "1e6",
        "11 / --(3)",
        "(2.0e2) * .5",
        "1E0",
        "5E7 / 10 ^ 7",
        "5 == 5",
        "3 != 5 / 4 * 2 + 2",
        "12 > 1 + 10",
        "var + 4",
        "hello / 8",
        "my_var = 3 * 3",
        "my_var = 4^5 == 6",
        "fun()",
        "fun() + call()",
        "result = fun() + call() / 2",
        "foo(z)",
        "foo(a, b, c)",
        "foo(a ^ 4, b = c == 4 != 6 % 1.44e99, 32432432, k)",
        "0xabbABFFE032185843B",
        "0b1010010101011010101010101",
        "0B0000111 - 7",
        "0xF + 0b1 / 0X0F * 0b01 ^ 0b0 / 0x0F",
        "y(x) = x^2 + 2",
        "a(b, c, d, a) = 2 * a / 5 * 7 ^ 8 ^ b / c * d == 9 + (my_var = 5)",
        "a(b) = c(d)",


        // INVALID inputs:
        "(",
        "(1 / 2",
        "1 / 2)",
        "(1 / 2).",
        "(1.2 / .5)2",
        "(1.2 / .5)+",
        "(1.2 / .5)-",
        "-",
        "+",
        "2 % * 2",
        "1-2-3*3.2.1",
        "2..3",
        "123*1++",
        "11e5"
        "1 = 1",
        "func() = 2",
        "",
        "()",
        "5()",
        "123abc()",
        "123abc = 3",
        "foo(a, b,)",
        "foo(,)",
        "foo(2 3)",
        "0b00010102",
        "0bx1",
        "0xg",
        "0x",
        "0b",

        // Variable / Function test inputs:
        " a = 1",
        "a",
        "a + b",
        "b = a = 2",
        "a",
        "b",
        "a / b",
        "c(a) = a + b",
        "c(0)",
        "b = 0",
        "c(0)",
        "b = -2",
        "c(2)",
        "f(x) = 2^x",
        "f(0)",
        "f(1)",
        "f(2)",
        "f(3)",
        "f(4)",
        "f()",
        "f(1, 2)",
        "f(1, 2, 3)",
        "g() = 5",
        "g()",
        "h(-1) = 0",
        "PI",
        "PI * 0",
        "PI * 2",
        "E",
        "OLD_E = E",
        "E = 0",
        "E",
        "E = OLD_E",
        "NAN",
        "RAND_MAX",
        "print_tree(1 + 2 + 3, E ^ 5 / (f = 666), f(-454) = 3)",
        "print_tree()",
        "min()",
        "min(1)",
        "min(0, 6, 2, 5, 4321)",
        "min(NAN, 1000000, 0x0)",
        "min(1e100, 1e-10, 1e-11)",
        "min(2, 4)",
        "max()",
        "max(1)",
        "max(0, 6, 2, 5, 4321)",
        "max(NAN, 1000000, 0x10)",
        "max(1e100, 1e-10, 1e-11)",
        "max(2, 4)",
        "gcd()",
        "gcd(0)",
        "gcd(2, 4)",
        "gcd(14, 49)",
        "gcd(10.5, 15.99999999999)",
        "gcd(2, 3, 7, 11, 13)",
        "gcd(0, 3, 4, 5)",
        "gcd(6, 9, 12)",
        "gcd(45, 90, 135)",
        "floor(5.999999)",
        "floor(0)",
        "floor(0b111 + 0.01)",
        "floor(-1.1)",
        "ceil(5.999999)",
        "ceil(0)",
        "ceil(0b111 + 0.01)",
        "ceil(-1.1)",
        "int(5.999999)",
        "int(0)",
        "int(0b111 + 0.01)",
        "int(-1.1)",
        "pow(2, .5)",
        "pow(2, 7)",
        "pow(10, 3)",
        "pow(11.1, 2)",
        "rand()",
        "rand()",
        "rand()",
        "rand(1)",
        "factorial(1)",
        "factorial(-1)",
        "factorial(5)",
        "factorial(99)",
        "perm(5, 3)",
        "perm(50, 30)",
        "perm(10, 6)",
        "perm(10.9, 6.01)",
        "perm(NAN, NAN)",
        "perm(1)",
        "comb(5, 3)",
        "comb(50, 30)",
        "comb(10, 6)",
        "comb(10.9, 6.01)",
        "comb(NAN, NAN)",
        "comb(1)",
        "deg(PI)",
        "rad(180)",
        "deg(0)",
        "deg(rad(13))",
        "rad(deg(13))",
        "sin(PI)",
        "cos(PI)",
        "tan(PI)",
        "csc(PI)",
        "sec(PI)",
        "cot(PI)",
        "asin(0)",
        "acos(0)",
        "atan(0)",
        "ln(E)",
        "log(1e10)",
        "lg(1024)",
        "logb(64, 8)",
        "log(435)",
        "g(x) = x ^ 3",
        "nderiv(g(y), y, 5)",
        "nderiv(z^2, z, 5)",
        "nderiv(x, x, 5)",
        "nintegral(x, x, 0, 100)",
        "nintegral(5 * z ^ 4, z, -1, 3, 1000)",
        "nintegral(-44 * (sin(x) ^ 3) / x, x, -PI, 100)", // =~ -76.96
        "f(x) = x^3",
        "f'(2)",
        "f'(3)",
        "f''(2)",
        "f'''(100)",
        "g(x) = x",
        "g'(100000)",
        "h(x) = sin(x)",
        "h'(PI / 2)",
        "i(x) = ln(x) + 5",
        "i'(10)",

        // Errors
        "&abc",
        "1234#  ",
        "     \\     ",
        "3432@*+-",
        "f(5) = 2",
        "f(a, b, c / 3) = a / 2 * c / 9",
        "f'(1, 2)",
        "f'()",
        "max()",
        "min()",
        "gcd()",
        "nderiv(a, b)",
        "nderiv(a, b, c, d)",
        "nderiv(1, 2, 3)",
        "nintegral(1, 2, 3)",
        "nintegral(1, 2, 3, 4, 5, 6)",
        "nintegral(1, 2, 3, 4, 5)",
        "my_fn(a, b, c) = a + b + c",
        "my_fn()",
        "my_fn(1)",
        "my_fn(1, 2)",
        "my_fn(1, 2, 3)",
        "not_a_function()",
        "null(1, 2, 3)"
    };

    for(string test_expr : testcases) {
        try {
            cout << "result for " << test_expr << " : " << endl;
            vector<unique_ptr<Token>> token_vec = tokenize(test_expr);

            int ptr;
            unique_ptr<TreeNode> tree = parseS(token_vec);
            if(tree == nullptr) throw invalid_expression_error("error while parsing");
            cout << tree->to_string() << endl;
            cout << tree->eval() << endl;
        } catch(calculator_error& err) {
            cout << err.to_string() << endl;
        }
    }

    return 0;
}
